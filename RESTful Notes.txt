==NOTES==

What is a RESTful API?
    Re-presentational State Transfer
    Moving DATA around.
----------------------------------------

    We have a server with urls supporting different types of http requests for the given urls
    it boils down to exchanging data.

----------------------------------------

    RESTful -constraints- (Theoretical Boundaries of RESTful API)
        Client-Server Architecture
            - Keeping the backend and frontend architecture separate.
        Stateless
            -No client session stored on server.
        Cacheability
            - Responses DEFINED as cacheable or non-cacheable.
        Layered System
            - Middle men servers might be used without the user(client) knowing about it.
        Uniform Interface
            - Resources are id'd in requests. 
            - Self desriptive messages and links to further resources.
        Code on Demand
            - Gives client back executable code.

----------------------------------------
----------------------------------------

PROJECT SETUP

----------------------------------------
----------------------------------------

What We'll Build

* = authentication

    Our API.
        /products
            GET | POST*
        /product/{id}
            GET | PATCH* | DELETE*
        /orders
            GET* | POST* 
        /orders{id}
            GET* | DELETE*

----------------------------------------
FILE STRUCTURE
    /api 
        All API related stuff (routes/models)
        /routes
            products.js

    /
        server.js
        app.js
----------------------------------------

----------------------------------------
NOTES
----------------------------------------

app.use()
    the use() methods SETS UP a middle ware.
        Incoming Request goes through app.use
        and whatever we pass through it.
            We can pass a special function
            (req, res, next)
                request, response, and next.
                next we use to move to the NEXT middleware.

express.Router()

ERROR HANDLING
    Install a Logging Package to display information about requests.

    What happens when we call a url that has no route? We must handle this situation.

======================================
Parsing The Body and Handling CORS.
==  ==  ==  ==  ==  ==  ==  ==  ==  ==

Body-Parser
    Parses BODY of incoming request.
        Use that data.
        import body-parser in the app.js
    
    app.use(bodyParser.urlencoded({extended: false}))
    app.use(bodyParser.json());

        These allow us to extract Json and urlencoded data.



